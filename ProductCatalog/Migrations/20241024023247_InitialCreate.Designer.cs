// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductCatalog.Data;

#nullable disable

namespace ProductCatalog.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241024023247_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerceWebMicroservices.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ECommerceWebMicroservices.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ECommerceWebMicroservices.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "High-performance car wax for a long-lasting shine.",
                            Price = 19.989999999999998,
                            ProductName = "Car Wax"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Gentle facial cleanser for all skin types.",
                            Price = 12.49,
                            ProductName = "Facial Cleanser"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A gripping mystery novel that will keep you on the edge of your seat.",
                            Price = 8.9900000000000002,
                            ProductName = "Mystery Novel"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Comfortable cotton T-shirt available in various colors.",
                            Price = 15.0,
                            ProductName = "Men's T-Shirt"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Latest model with cutting-edge features.",
                            Price = 699.99000000000001,
                            ProductName = "Smartphone"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Daily multivitamins to boost your health.",
                            Price = 25.5,
                            ProductName = "Vitamins"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Complete set of tools for your gardening needs.",
                            Price = 45.0,
                            ProductName = "Garden Tools Set"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Comfortable and durable pet bed for your furry friends.",
                            Price = 35.0,
                            ProductName = "Pet Bed"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Spacious tent for outdoor adventures.",
                            Price = 120.0,
                            ProductName = "Camping Tent"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Fun and engaging board game for family and friends.",
                            Price = 29.989999999999998,
                            ProductName = "Board Game"
                        });
                });

            modelBuilder.Entity("ECommerceWebMicroservices.Models.CartItem", b =>
                {
                    b.HasOne("ECommerceWebMicroservices.Models.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");
                });

            modelBuilder.Entity("ECommerceWebMicroservices.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
